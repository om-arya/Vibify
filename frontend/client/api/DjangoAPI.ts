import axios, { HttpStatusCode } from 'axios';
import { DJANGO_URL } from '../../appSecrets.ts';

// Stop Axios from throwing errors, allowing responses to be handled on the client side
// regardless of status code
axios.defaults.validateStatus = _ => true;

const DjangoAPI = () => {
    
    /**
     * Acquire a CSRF token generated by the server and set the
     * appropriate Axios defaults, including the token header.
     * 
     * @returns the server response status code.
     */
    async function acquireCsrfToken() {
        const response = await axios.get(DJANGO_URL + 'get_csrf_token/', { withCredentials: true });
        if (response.status !== HttpStatusCode.Ok) {
            return response.status;
        }

        axios.defaults.xsrfCookieName = 'csrftoken';
        axios.defaults.xsrfHeaderName = 'X-CSRFToken';
        axios.defaults.headers.common['X-CSRFToken'] = response.data.csrfToken;
        axios.defaults.headers.withXSRFToken = true;
        axios.defaults.withCredentials = true;

        return response.status as HttpStatusCode;
    }

    return { acquireCsrfToken };
}

export default DjangoAPI;